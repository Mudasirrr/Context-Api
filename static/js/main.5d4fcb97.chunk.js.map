{"version":3,"sources":["ValueContext.js","Child.js","NumberReducer.js.js","Child2.js","Parent.js","App.js","serviceWorker.js","index.js"],"names":["ValueContext","React","createContext","Child","value","useContext","className","onClick","numberReducer","state","action","type","Child2","useReducer","dispatch","Parent","props","App","useState","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0IAaeA,G,KAHIC,IAAMC,cAAc,IAAG,gBCI3BC,MAXf,WACE,IAAIC,EAAQC,qBAAWL,GACvB,OACE,yBAAKM,UAAU,SACb,2DACA,4CAAkBF,EAAM,IACxB,4BAAQG,QAAS,WAAKH,EAAM,KAAKA,EAAM,MAAvC,kB,OCCSI,EAVO,SAACC,EAAMC,GAC3B,OAAOA,EAAOC,MACZ,IAAK,YACH,OAAOF,EAAO,EAChB,IAAK,YACH,OAAOA,EAAO,EAChB,QACE,OAAOA,ICUEG,MAbf,WAAkB,MAEKC,qBAAWL,EAAc,IAF9B,mBAEXC,EAFW,KAELK,EAFK,KAGhB,OACE,yBAAKR,UAAU,SACf,4DACF,wCAAcG,GACd,4BAAQF,QAAS,WAAKO,EAAS,CAACH,KAAK,gBAArC,aACA,4BAAQJ,QAAS,WAAKO,EAAS,CAACH,KAAK,gBAArC,eCIaI,MAZf,SAAgBC,GACd,OAEE,yBAAKV,UAAU,UAEf,yDACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCUSW,MAlBf,WAGA,IAAIb,EAAMc,mBAAS,IACjB,OACE,kBAAC,EAAaC,SAAd,CAAuBf,MAAOA,GAG9B,yBAAKE,UAAU,OACb,0DACA,kBAAC,EAAD,SCDcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5d4fcb97.chunk.js","sourcesContent":["import React from 'react';\n/**\n * Context has two things\n *  1.Provider\n *      whenever we work with context we first provide some data so that component can access that value\n * \n *  2.Consumer\n *      to use in a component use consumer, consume the value\n * =>It is a sort of global variable\n */\nconst ValueContext=React.createContext(45,()=>{});\n\n\nexport default ValueContext;","import React, { useContext } from 'react';\nimport ValueContext from './ValueContext';\n\nfunction Child() {\n  let value = useContext(ValueContext);\n  return (\n    <div className=\"Child\">\n      <h1>Child component............</h1>\n      <h1>Child Number {value[0]}</h1>\n      <button onClick={()=>{value[1](++value[0])}}>Update Value</button>\n    </div>\n  );\n}\n\nexport default Child;\n","const numberReducer = (state,action)=>{\n  switch(action.type){\n    case 'INCREMENT':\n      return state +1;\n    case 'DECREMENT':\n      return state -1;\n    default:\n      return state;\n  }\n}\nexport default numberReducer;","import React, { useContext, useReducer } from 'react';\nimport ValueContext from './ValueContext';\nimport numberReducer from './NumberReducer.js';\n\nfunction Child2() {\n  // let value = useContext(ValueContext);\n  let [state,dispatch]=useReducer(numberReducer,52);\n  return (\n    <div className=\"Child\">\n    <h1>Child2 component............</h1>\n  <h3>Child2 = {state}</h3>\n  <button onClick={()=>{dispatch({type:'INCREMENT'});}}>Increment</button>\n  <button onClick={()=>{dispatch({type:'DECREMENT'});}}>Decrement</button>\n    </div>\n  );\n}\n\nexport default Child2;\n","import React, { useState } from 'react';\nimport Child from './Child';\nimport Child2 from './Child2';\n\nfunction Parent(props) {\n  return (\n\n    <div className=\"Parent\">\n\n    <h1>Parent compon............</h1>\n      <Child/>\n      <Child2/>\n    </div>\n  );\n}\n\nexport default Parent;\n","import React,{useState, useContext, useReducer}from 'react';\nimport Parent from './Parent';\nimport ValueContext from './ValueContext';\nfunction App() {\n\n  // let [number, setNumber]=useState(7);\nlet value=useState(48);\n  return (\n    <ValueContext.Provider value={value}>\n\n\n    <div className=\"App\">\n      <h1>App component.............</h1>\n      <Parent/> \n    </div>\n\n    </ValueContext.Provider>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}